<?php

namespace DoctrineORMModule\Proxy\__CG__\Auth\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Question extends \Auth\Entity\Question implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;
    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;
    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }


    /**
     *
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array(
                '__isInitialized__',
                'question',
                'id',
                'sys_deleted',
                'sys_author',
                'sys_modified',
                'sys_creator',
                'sys_created'
            );
        }

        return array(
            '__isInitialized__',
            'question',
            'id',
            'sys_deleted',
            'sys_author',
            'sys_modified',
            'sys_creator',
            'sys_created'
        );
    }

    /**
     *
     */
    public function __wakeup()
    {
        if (!$this->__isInitialized__) {
            $this->__initializer__ = function (Question $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if (!array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    /**
     *
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     */
    public function getQuestion()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getQuestion', array());

        return parent::getQuestion();
    }

    /**
     * {@inheritDoc}
     */
    public function setQuestion($question)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setQuestion', array($question));

        return parent::setQuestion($question);
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', array($id));

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getSysDeleted()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSysDeleted', array());

        return parent::getSysDeleted();
    }

    /**
     * {@inheritDoc}
     */
    public function setSysDeleted($sys_deleted)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSysDeleted', array($sys_deleted));

        return parent::setSysDeleted($sys_deleted);
    }

    /**
     * {@inheritDoc}
     */
    public function getSysAuthor()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSysAuthor', array());

        return parent::getSysAuthor();
    }

    /**
     * {@inheritDoc}
     */
    public function setSysAuthor($sys_author)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSysAuthor', array($sys_author));

        return parent::setSysAuthor($sys_author);
    }

    /**
     * {@inheritDoc}
     */
    public function getSysModified()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSysModified', array());

        return parent::getSysModified();
    }

    /**
     * {@inheritDoc}
     */
    public function setSysModified($sys_modified)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSysModified', array($sys_modified));

        return parent::setSysModified($sys_modified);
    }

    /**
     * {@inheritDoc}
     */
    public function getSysCreator()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSysCreator', array());

        return parent::getSysCreator();
    }

    /**
     * {@inheritDoc}
     */
    public function setSysCreator($sys_creator)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSysCreator', array($sys_creator));

        return parent::setSysCreator($sys_creator);
    }

    /**
     * {@inheritDoc}
     */
    public function getSysCreated()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSysCreated', array());

        return parent::getSysCreated();
    }

    /**
     * {@inheritDoc}
     */
    public function setSysCreated($sys_created)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSysCreated', array($sys_created));

        return parent::setSysCreated($sys_created);
    }

    /**
     * {@inheritDoc}
     */
    public function setCr($identity)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCr', array($identity));

        return parent::setCr($identity);
    }

    /**
     * {@inheritDoc}
     */
    public function setCh($identity)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCh', array($identity));

        return parent::setCh($identity);
    }

}
